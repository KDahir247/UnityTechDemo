//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Project/Input/CoreInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Tech.Input
{
    public partial class @CoreInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CoreInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CoreInput"",
    ""maps"": [
        {
            ""name"": ""UIMapping"",
            ""id"": ""1e334ec0-2324-4c47-8ba4-2d52f12c4e04"",
            ""actions"": [],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
            // UIMapping
            m_UIMapping = asset.FindActionMap("UIMapping", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // UIMapping
        private readonly InputActionMap m_UIMapping;
        private IUIMappingActions m_UIMappingActionsCallbackInterface;
        public struct UIMappingActions
        {
            private @CoreInput m_Wrapper;
            public UIMappingActions(@CoreInput wrapper) { m_Wrapper = wrapper; }
            public InputActionMap Get() { return m_Wrapper.m_UIMapping; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIMappingActions set) { return set.Get(); }
            public void SetCallbacks(IUIMappingActions instance)
            {
                if (m_Wrapper.m_UIMappingActionsCallbackInterface != null)
                {
                }
                m_Wrapper.m_UIMappingActionsCallbackInterface = instance;
                if (instance != null)
                {
                }
            }
        }
        public UIMappingActions @UIMapping => new UIMappingActions(this);
        public interface IUIMappingActions
        {
        }
    }
}
