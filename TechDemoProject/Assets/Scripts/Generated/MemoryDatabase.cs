// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using Tech.Data.DB;
using Tech.DB;
using MasterData.Tables;

namespace MasterData
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public AbilityTable AbilityTable { get; private set; }
        public EnemyTable EnemyTable { get; private set; }
        public EquipmentTable EquipmentTable { get; private set; }
        public ItemTable ItemTable { get; private set; }
        public MaterialTable MaterialTable { get; private set; }
        public SkillTable SkillTable { get; private set; }
        public UnitTable UnitTable { get; private set; }
        public WeaponTable WeaponTable { get; private set; }

        public MemoryDatabase(
            AbilityTable AbilityTable,
            EnemyTable EnemyTable,
            EquipmentTable EquipmentTable,
            ItemTable ItemTable,
            MaterialTable MaterialTable,
            SkillTable SkillTable,
            UnitTable UnitTable,
            WeaponTable WeaponTable
        )
        {
            this.AbilityTable = AbilityTable;
            this.EnemyTable = EnemyTable;
            this.EquipmentTable = EquipmentTable;
            this.ItemTable = ItemTable;
            this.MaterialTable = MaterialTable;
            this.SkillTable = SkillTable;
            this.UnitTable = UnitTable;
            this.WeaponTable = WeaponTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null)
            : base(databaseBinary, internString, formatterResolver)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options)
        {
            this.AbilityTable = ExtractTableData<Ability, AbilityTable>(header, databaseBinary, options, xs => new AbilityTable(xs));
            this.EnemyTable = ExtractTableData<Enemy, EnemyTable>(header, databaseBinary, options, xs => new EnemyTable(xs));
            this.EquipmentTable = ExtractTableData<Equipment, EquipmentTable>(header, databaseBinary, options, xs => new EquipmentTable(xs));
            this.ItemTable = ExtractTableData<Item, ItemTable>(header, databaseBinary, options, xs => new ItemTable(xs));
            this.MaterialTable = ExtractTableData<Material, MaterialTable>(header, databaseBinary, options, xs => new MaterialTable(xs));
            this.SkillTable = ExtractTableData<Skill, SkillTable>(header, databaseBinary, options, xs => new SkillTable(xs));
            this.UnitTable = ExtractTableData<Unit, UnitTable>(header, databaseBinary, options, xs => new UnitTable(xs));
            this.WeaponTable = ExtractTableData<Weapon, WeaponTable>(header, databaseBinary, options, xs => new WeaponTable(xs));
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.AbilityTable.GetRawDataUnsafe());
            builder.Append(this.EnemyTable.GetRawDataUnsafe());
            builder.Append(this.EquipmentTable.GetRawDataUnsafe());
            builder.Append(this.ItemTable.GetRawDataUnsafe());
            builder.Append(this.MaterialTable.GetRawDataUnsafe());
            builder.Append(this.SkillTable.GetRawDataUnsafe());
            builder.Append(this.UnitTable.GetRawDataUnsafe());
            builder.Append(this.WeaponTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.AbilityTable.GetRawDataUnsafe());
            builder.Append(this.EnemyTable.GetRawDataUnsafe());
            builder.Append(this.EquipmentTable.GetRawDataUnsafe());
            builder.Append(this.ItemTable.GetRawDataUnsafe());
            builder.Append(this.MaterialTable.GetRawDataUnsafe());
            builder.Append(this.SkillTable.GetRawDataUnsafe());
            builder.Append(this.UnitTable.GetRawDataUnsafe());
            builder.Append(this.WeaponTable.GetRawDataUnsafe());
            return builder;
        }

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                AbilityTable,
                EnemyTable,
                EquipmentTable,
                ItemTable,
                MaterialTable,
                SkillTable,
                UnitTable,
                WeaponTable,
            });

            ((ITableUniqueValidate)AbilityTable).ValidateUnique(result);
            ValidateTable(AbilityTable.All, database, "Name", AbilityTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EnemyTable).ValidateUnique(result);
            ValidateTable(EnemyTable.All, database, "Name", EnemyTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)EquipmentTable).ValidateUnique(result);
            ValidateTable(EquipmentTable.All, database, "Name", EquipmentTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ItemTable).ValidateUnique(result);
            ValidateTable(ItemTable.All, database, "Name", ItemTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)MaterialTable).ValidateUnique(result);
            ValidateTable(MaterialTable.All, database, "Name", MaterialTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SkillTable).ValidateUnique(result);
            ValidateTable(SkillTable.All, database, "Name", SkillTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)UnitTable).ValidateUnique(result);
            ValidateTable(UnitTable.All, database, "Name", UnitTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)WeaponTable).ValidateUnique(result);
            ValidateTable(WeaponTable.All, database, "Name", WeaponTable.PrimaryKeySelector, result);

            return result;
        }

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "ability":
                    return db.AbilityTable;
                case "enemy":
                    return db.EnemyTable;
                case "equipment":
                    return db.EquipmentTable;
                case "item":
                    return db.ItemTable;
                case "material":
                    return db.MaterialTable;
                case "Image":
                    return db.SkillTable;
                case "unit":
                    return db.UnitTable;
                case "weapon":
                    return db.WeaponTable;
                
                default:
                    return null;
            }
        }

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("ability", MasterData.Tables.AbilityTable.CreateMetaTable());
            dict.Add("enemy", MasterData.Tables.EnemyTable.CreateMetaTable());
            dict.Add("equipment", MasterData.Tables.EquipmentTable.CreateMetaTable());
            dict.Add("item", MasterData.Tables.ItemTable.CreateMetaTable());
            dict.Add("material", MasterData.Tables.MaterialTable.CreateMetaTable());
            dict.Add("Image", MasterData.Tables.SkillTable.CreateMetaTable());
            dict.Add("unit", MasterData.Tables.UnitTable.CreateMetaTable());
            dict.Add("weapon", MasterData.Tables.WeaponTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }
    }
}