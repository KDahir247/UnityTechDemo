// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;
using Tech.DB;

namespace MasterData.Tables
{
   public sealed partial class UserTable : TableBase<User>, ITableUniqueValidate
   {
        public Func<User, int> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<User, int> primaryIndexSelector;

        readonly User[] secondaryIndex0;
        readonly Func<User, string> secondaryIndex0Selector;

        public UserTable(User[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Level;
            this.secondaryIndex0Selector = x => x.Username;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<User> SortByUsername => new RangeView<User>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public User FindByLevel(int key)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].Level;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { return data[mid]; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            return default;
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool TryFindByLevel(int key, out User result)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].Level;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { result = data[mid]; return true; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            result = default;
            return false;
        }

        public User FindClosestByLevel(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<User> FindRangeByLevel(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public User FindByUsername(string key)
        {
            return FindUniqueCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, key, false);
        }
        
        public bool TryFindByUsername(string key, out User result)
        {
            return TryFindUniqueCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, key, out result);
        }

        public User FindClosestByUsername(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<User> FindRangeByUsername(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(secondaryIndex0, secondaryIndex0Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
            ValidateUniqueCore(data, primaryIndexSelector, "Level", resultSet);       
            ValidateUniqueCore(secondaryIndex0, secondaryIndex0Selector, "Username", resultSet);       
        }

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(User), typeof(UserTable), "user",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Id")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Level")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Username")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("TrophyTextureImage")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Note")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Cred")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Energy")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("Comment")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("PossessedUnit")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("PossessedEquipments")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("PossessedMaterials")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("PossessedItems")),
                    new MasterMemory.Meta.MetaProperty(typeof(User).GetProperty("PossessedWeapons")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(User).GetProperty("Level"),
                    }, true, true, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(User).GetProperty("Username"),
                    }, false, true, System.StringComparer.Ordinal),
                });
        }

    }
}