// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(30)
            {
                { typeof(global::Tech.Data.DB.Ailment), 0 },
                { typeof(global::Tech.Data.DB.Element), 1 },
                { typeof(global::Tech.Data.DB.EquipmentType), 2 },
                { typeof(global::Tech.Data.DB.ItemType), 3 },
                { typeof(global::Tech.Data.DB.ParameterType), 4 },
                { typeof(global::Tech.Data.DB.RaceType), 5 },
                { typeof(global::Tech.Data.DB.Rarity), 6 },
                { typeof(global::Tech.Data.DB.Target), 7 },
                { typeof(global::Tech.Data.DB.TargetStat), 8 },
                { typeof(global::Tech.Data.DB.TraitType), 9 },
                { typeof(global::Tech.Data.DB.UnitType), 10 },
                { typeof(global::Tech.Data.DB.WeaponType), 11 },
                { typeof(global::Tech.Data.DB.AbilityInfo), 12 },
                { typeof(global::Tech.Data.DB.EnemyInfo), 13 },
                { typeof(global::Tech.Data.DB.EquipmentInfo), 14 },
                { typeof(global::Tech.Data.DB.ItemInfo), 15 },
                { typeof(global::Tech.Data.DB.MaterialInfo), 16 },
                { typeof(global::Tech.Data.DB.SkillInfo), 17 },
                { typeof(global::Tech.Data.DB.Stat), 18 },
                { typeof(global::Tech.Data.DB.UnitInfo), 19 },
                { typeof(global::Tech.Data.DB.WeaponInfo), 20 },
                { typeof(global::Tech.DB.Ability), 21 },
                { typeof(global::Tech.DB.Enemy), 22 },
                { typeof(global::Tech.DB.Equipment), 23 },
                { typeof(global::Tech.DB.Item), 24 },
                { typeof(global::Tech.DB.Material), 25 },
                { typeof(global::Tech.DB.Skill), 26 },
                { typeof(global::Tech.DB.Unit), 27 },
                { typeof(global::Tech.DB.Weapon), 28 },
                { typeof(global::Tech.Network.Param.Player), 29 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Tech.Data.DB.AilmentFormatter();
                case 1: return new MessagePack.Formatters.Tech.Data.DB.ElementFormatter();
                case 2: return new MessagePack.Formatters.Tech.Data.DB.EquipmentTypeFormatter();
                case 3: return new MessagePack.Formatters.Tech.Data.DB.ItemTypeFormatter();
                case 4: return new MessagePack.Formatters.Tech.Data.DB.ParameterTypeFormatter();
                case 5: return new MessagePack.Formatters.Tech.Data.DB.RaceTypeFormatter();
                case 6: return new MessagePack.Formatters.Tech.Data.DB.RarityFormatter();
                case 7: return new MessagePack.Formatters.Tech.Data.DB.TargetFormatter();
                case 8: return new MessagePack.Formatters.Tech.Data.DB.TargetStatFormatter();
                case 9: return new MessagePack.Formatters.Tech.Data.DB.TraitTypeFormatter();
                case 10: return new MessagePack.Formatters.Tech.Data.DB.UnitTypeFormatter();
                case 11: return new MessagePack.Formatters.Tech.Data.DB.WeaponTypeFormatter();
                case 12: return new MessagePack.Formatters.Tech.Data.DB.AbilityInfoFormatter();
                case 13: return new MessagePack.Formatters.Tech.Data.DB.EnemyInfoFormatter();
                case 14: return new MessagePack.Formatters.Tech.Data.DB.EquipmentInfoFormatter();
                case 15: return new MessagePack.Formatters.Tech.Data.DB.ItemInfoFormatter();
                case 16: return new MessagePack.Formatters.Tech.Data.DB.MaterialInfoFormatter();
                case 17: return new MessagePack.Formatters.Tech.Data.DB.SkillInfoFormatter();
                case 18: return new MessagePack.Formatters.Tech.Data.DB.StatFormatter();
                case 19: return new MessagePack.Formatters.Tech.Data.DB.UnitInfoFormatter();
                case 20: return new MessagePack.Formatters.Tech.Data.DB.WeaponInfoFormatter();
                case 21: return new MessagePack.Formatters.Tech.DB.AbilityFormatter();
                case 22: return new MessagePack.Formatters.Tech.DB.EnemyFormatter();
                case 23: return new MessagePack.Formatters.Tech.DB.EquipmentFormatter();
                case 24: return new MessagePack.Formatters.Tech.DB.ItemFormatter();
                case 25: return new MessagePack.Formatters.Tech.DB.MaterialFormatter();
                case 26: return new MessagePack.Formatters.Tech.DB.SkillFormatter();
                case 27: return new MessagePack.Formatters.Tech.DB.UnitFormatter();
                case 28: return new MessagePack.Formatters.Tech.DB.WeaponFormatter();
                case 29: return new MessagePack.Formatters.Tech.Network.Param.PlayerFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Tech.Data.DB
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AilmentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.Ailment>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.Ailment value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.Ailment Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.Ailment)reader.ReadInt32();
        }
    }

    public sealed class ElementFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.Element>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.Element value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.Element Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.Element)reader.ReadInt32();
        }
    }

    public sealed class EquipmentTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.EquipmentType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.EquipmentType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.EquipmentType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.EquipmentType)reader.ReadInt32();
        }
    }

    public sealed class ItemTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.ItemType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.ItemType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.ItemType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.ItemType)reader.ReadInt32();
        }
    }

    public sealed class ParameterTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.ParameterType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.ParameterType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.ParameterType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.ParameterType)reader.ReadInt32();
        }
    }

    public sealed class RaceTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.RaceType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.RaceType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.RaceType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.RaceType)reader.ReadInt32();
        }
    }

    public sealed class RarityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.Rarity>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.Rarity value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.Rarity Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.Rarity)reader.ReadInt32();
        }
    }

    public sealed class TargetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.Target>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.Target value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.Target Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.Target)reader.ReadInt32();
        }
    }

    public sealed class TargetStatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.TargetStat>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.TargetStat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.TargetStat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.TargetStat)reader.ReadInt32();
        }
    }

    public sealed class TraitTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.TraitType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.TraitType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.TraitType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.TraitType)reader.ReadInt32();
        }
    }

    public sealed class UnitTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.UnitType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.UnitType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.UnitType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.UnitType)reader.ReadInt32();
        }
    }

    public sealed class WeaponTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.WeaponType>
    {
        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.WeaponType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::Tech.Data.DB.WeaponType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::Tech.Data.DB.WeaponType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MagicOnion
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(20);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
            formatterResolver.GetFormatterWithVerify<T18>().Serialize(ref writer, value.Item18, options);
            formatterResolver.GetFormatterWithVerify<T19>().Serialize(ref writer, value.Item19, options);
            formatterResolver.GetFormatterWithVerify<T20>().Serialize(ref writer, value.Item20, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);
            var __Item18__ = default(T18);
            var __Item19__ = default(T19);
            var __Item20__ = default(T20);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Item18__ = formatterResolver.GetFormatterWithVerify<T18>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __Item19__ = formatterResolver.GetFormatterWithVerify<T19>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __Item20__ = formatterResolver.GetFormatterWithVerify<T20>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__, __Item18__, __Item19__, __Item20__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(19);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
            formatterResolver.GetFormatterWithVerify<T18>().Serialize(ref writer, value.Item18, options);
            formatterResolver.GetFormatterWithVerify<T19>().Serialize(ref writer, value.Item19, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);
            var __Item18__ = default(T18);
            var __Item19__ = default(T19);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Item18__ = formatterResolver.GetFormatterWithVerify<T18>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __Item19__ = formatterResolver.GetFormatterWithVerify<T19>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__, __Item18__, __Item19__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(18);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
            formatterResolver.GetFormatterWithVerify<T18>().Serialize(ref writer, value.Item18, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);
            var __Item18__ = default(T18);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Item18__ = formatterResolver.GetFormatterWithVerify<T18>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__, __Item18__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(16);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(15);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(13);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(12);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4>(__Item1__, __Item2__, __Item3__, __Item4__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3>(__Item1__, __Item2__, __Item3__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2>(__Item1__, __Item2__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Tech.Data.DB
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AbilityInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.AbilityInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public AbilityInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "ElementType", 0 },
                { "TargetParameter", 1 },
                { "AbilityType", 2 },
                { "AbilityTarget", 3 },
                { "Ailment", 4 },
                { "InnocenceCost", 5 },
                { "NumberOfHits", 6 },
                { "Duration", 7 },
                { "Amount", 8 },
                { "Buff", 9 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TargetParameter"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AbilityType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AbilityTarget"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Ailment"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("InnocenceCost"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("NumberOfHits"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Duration"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Amount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Buff"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.AbilityInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(10);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementType, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.TargetStat>().Serialize(ref writer, value.TargetParameter, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ParameterType>().Serialize(ref writer, value.AbilityType, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Target>().Serialize(ref writer, value.AbilityTarget, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.Ailment, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.InnocenceCost);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.NumberOfHits);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.Duration);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.Write(value.Amount);
            writer.WriteRaw(this.____stringByteKeys[9]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.Buff, options);
        }

        public global::Tech.Data.DB.AbilityInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __ElementType__ = default(global::Tech.Data.DB.Element);
            var __TargetParameter__ = default(global::Tech.Data.DB.TargetStat);
            var __AbilityType__ = default(global::Tech.Data.DB.ParameterType);
            var __AbilityTarget__ = default(global::Tech.Data.DB.Target);
            var __Ailment__ = default(global::Tech.Data.DB.Ailment);
            var __InnocenceCost__ = default(uint);
            var __NumberOfHits__ = default(uint);
            var __Duration__ = default(uint);
            var __Amount__ = default(uint);
            var __Buff__ = default(global::Tech.Data.DB.Stat);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __ElementType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TargetParameter__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.TargetStat>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __AbilityType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ParameterType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __AbilityTarget__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Target>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Ailment__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __InnocenceCost__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __NumberOfHits__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __Duration__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __Amount__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __Buff__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.AbilityInfo();
            ____result.ElementType = __ElementType__;
            ____result.TargetParameter = __TargetParameter__;
            ____result.AbilityType = __AbilityType__;
            ____result.AbilityTarget = __AbilityTarget__;
            ____result.Ailment = __Ailment__;
            ____result.InnocenceCost = __InnocenceCost__;
            ____result.NumberOfHits = __NumberOfHits__;
            ____result.Duration = __Duration__;
            ____result.Amount = __Amount__;
            ____result.Buff = __Buff__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnemyInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.EnemyInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public EnemyInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Rarity", 0 },
                { "Level", 1 },
                { "RaceType", 2 },
                { "ElementAttack", 3 },
                { "ElementResistance", 4 },
                { "StatusAilmentResistance", 5 },
                { "Stat", 6 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Rarity"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("RaceType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementAttack"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementResistance"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StatusAilmentResistance"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Stat"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.EnemyInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Serialize(ref writer, value.Rarity, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.RaceType>().Serialize(ref writer, value.RaceType, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementAttack, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementResistance, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.StatusAilmentResistance, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.Stat, options);
        }

        public global::Tech.Data.DB.EnemyInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Rarity__ = default(global::Tech.Data.DB.Rarity);
            var __Level__ = default(uint);
            var __RaceType__ = default(global::Tech.Data.DB.RaceType);
            var __ElementAttack__ = default(global::Tech.Data.DB.Element);
            var __ElementResistance__ = default(global::Tech.Data.DB.Element);
            var __StatusAilmentResistance__ = default(global::Tech.Data.DB.Ailment);
            var __Stat__ = default(global::Tech.Data.DB.Stat);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Rarity__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __RaceType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.RaceType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ElementAttack__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ElementResistance__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StatusAilmentResistance__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Stat__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.EnemyInfo();
            ____result.Rarity = __Rarity__;
            ____result.Level = __Level__;
            ____result.RaceType = __RaceType__;
            ____result.ElementAttack = __ElementAttack__;
            ____result.ElementResistance = __ElementResistance__;
            ____result.StatusAilmentResistance = __StatusAilmentResistance__;
            ____result.Stat = __Stat__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EquipmentInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.EquipmentInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public EquipmentInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Rarity", 1 },
                { "EquipmentType", 2 },
                { "EquipmentStat", 3 },
                { "ElementalAttack", 4 },
                { "StatusAilment", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Rarity"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("EquipmentType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("EquipmentStat"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementalAttack"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StatusAilment"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.EquipmentInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Serialize(ref writer, value.Rarity, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.EquipmentType>().Serialize(ref writer, value.EquipmentType, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.EquipmentStat, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementalAttack, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.StatusAilment, options);
        }

        public global::Tech.Data.DB.EquipmentInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(uint);
            var __Rarity__ = default(global::Tech.Data.DB.Rarity);
            var __EquipmentType__ = default(global::Tech.Data.DB.EquipmentType);
            var __EquipmentStat__ = default(global::Tech.Data.DB.Stat);
            var __ElementalAttack__ = default(global::Tech.Data.DB.Element);
            var __StatusAilment__ = default(global::Tech.Data.DB.Ailment);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __Rarity__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __EquipmentType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.EquipmentType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __EquipmentStat__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ElementalAttack__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StatusAilment__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.EquipmentInfo();
            ____result.Level = __Level__;
            ____result.Rarity = __Rarity__;
            ____result.EquipmentType = __EquipmentType__;
            ____result.EquipmentStat = __EquipmentStat__;
            ____result.ElementalAttack = __ElementalAttack__;
            ____result.StatusAilment = __StatusAilment__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.ItemInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ItemInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Rarity", 1 },
                { "ItemType", 2 },
                { "CureAilment", 3 },
                { "InflictAilment", 4 },
                { "Target", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Rarity"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ItemType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("CureAilment"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("InflictAilment"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Target"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.ItemInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Serialize(ref writer, value.Rarity, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ItemType>().Serialize(ref writer, value.ItemType, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.CureAilment, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.InflictAilment, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Target>().Serialize(ref writer, value.Target, options);
        }

        public global::Tech.Data.DB.ItemInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(uint);
            var __Rarity__ = default(global::Tech.Data.DB.Rarity);
            var __ItemType__ = default(global::Tech.Data.DB.ItemType);
            var __CureAilment__ = default(global::Tech.Data.DB.Ailment);
            var __InflictAilment__ = default(global::Tech.Data.DB.Ailment);
            var __Target__ = default(global::Tech.Data.DB.Target);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __Rarity__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ItemType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ItemType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __CureAilment__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __InflictAilment__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Target__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Target>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.ItemInfo();
            ____result.Level = __Level__;
            ____result.Rarity = __Rarity__;
            ____result.ItemType = __ItemType__;
            ____result.CureAilment = __CureAilment__;
            ____result.InflictAilment = __InflictAilment__;
            ____result.Target = __Target__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MaterialInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.MaterialInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public MaterialInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Rarity", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Rarity"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.MaterialInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Serialize(ref writer, value.Rarity, options);
        }

        public global::Tech.Data.DB.MaterialInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(uint);
            var __Rarity__ = default(global::Tech.Data.DB.Rarity);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __Rarity__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.MaterialInfo();
            ____result.Level = __Level__;
            ____result.Rarity = __Rarity__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.SkillInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SkillInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "ElementType", 0 },
                { "TraitType", 1 },
                { "TargetParameter", 2 },
                { "SkillType", 3 },
                { "SkillTarget", 4 },
                { "Ailment", 5 },
                { "ManapointCost", 6 },
                { "NumberOfHits", 7 },
                { "Duration", 8 },
                { "Amount", 9 },
                { "Buff", 10 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TraitType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("TargetParameter"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillTarget"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Ailment"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ManapointCost"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("NumberOfHits"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Duration"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Amount"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Buff"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.SkillInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(11);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementType, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.TraitType>().Serialize(ref writer, value.TraitType, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.TargetStat>().Serialize(ref writer, value.TargetParameter, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ParameterType>().Serialize(ref writer, value.SkillType, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Target>().Serialize(ref writer, value.SkillTarget, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.Ailment, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.ManapointCost);
            writer.WriteRaw(this.____stringByteKeys[7]);
            writer.Write(value.NumberOfHits);
            writer.WriteRaw(this.____stringByteKeys[8]);
            writer.Write(value.Duration);
            writer.WriteRaw(this.____stringByteKeys[9]);
            writer.Write(value.Amount);
            writer.WriteRaw(this.____stringByteKeys[10]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.Buff, options);
        }

        public global::Tech.Data.DB.SkillInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __ElementType__ = default(global::Tech.Data.DB.Element);
            var __TraitType__ = default(global::Tech.Data.DB.TraitType);
            var __TargetParameter__ = default(global::Tech.Data.DB.TargetStat);
            var __SkillType__ = default(global::Tech.Data.DB.ParameterType);
            var __SkillTarget__ = default(global::Tech.Data.DB.Target);
            var __Ailment__ = default(global::Tech.Data.DB.Ailment);
            var __ManapointCost__ = default(uint);
            var __NumberOfHits__ = default(uint);
            var __Duration__ = default(uint);
            var __Amount__ = default(uint);
            var __Buff__ = default(global::Tech.Data.DB.Stat);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __ElementType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __TraitType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.TraitType>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __TargetParameter__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.TargetStat>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __SkillType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ParameterType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __SkillTarget__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Target>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Ailment__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __ManapointCost__ = reader.ReadUInt32();
                        break;
                    case 7:
                        __NumberOfHits__ = reader.ReadUInt32();
                        break;
                    case 8:
                        __Duration__ = reader.ReadUInt32();
                        break;
                    case 9:
                        __Amount__ = reader.ReadUInt32();
                        break;
                    case 10:
                        __Buff__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.SkillInfo();
            ____result.ElementType = __ElementType__;
            ____result.TraitType = __TraitType__;
            ____result.TargetParameter = __TargetParameter__;
            ____result.SkillType = __SkillType__;
            ____result.SkillTarget = __SkillTarget__;
            ____result.Ailment = __Ailment__;
            ____result.ManapointCost = __ManapointCost__;
            ____result.NumberOfHits = __NumberOfHits__;
            ____result.Duration = __Duration__;
            ____result.Amount = __Amount__;
            ____result.Buff = __Buff__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.Stat>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public StatFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Health", 0 },
                { "Attack", 1 },
                { "Defence", 2 },
                { "Manapoint", 3 },
                { "Magic", 4 },
                { "Spirit", 5 },
                { "Speed", 6 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Health"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Attack"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Defence"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Manapoint"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Magic"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Spirit"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Speed"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.Stat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Health);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Attack);
            writer.WriteRaw(this.____stringByteKeys[2]);
            writer.Write(value.Defence);
            writer.WriteRaw(this.____stringByteKeys[3]);
            writer.Write(value.Manapoint);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.Magic);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.Spirit);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.Speed);
        }

        public global::Tech.Data.DB.Stat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Health__ = default(uint);
            var __Attack__ = default(uint);
            var __Defence__ = default(uint);
            var __Manapoint__ = default(uint);
            var __Magic__ = default(uint);
            var __Spirit__ = default(uint);
            var __Speed__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Health__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __Attack__ = reader.ReadUInt32();
                        break;
                    case 2:
                        __Defence__ = reader.ReadUInt32();
                        break;
                    case 3:
                        __Manapoint__ = reader.ReadUInt32();
                        break;
                    case 4:
                        __Magic__ = reader.ReadUInt32();
                        break;
                    case 5:
                        __Spirit__ = reader.ReadUInt32();
                        break;
                    case 6:
                        __Speed__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.Stat();
            ____result.Health = __Health__;
            ____result.Attack = __Attack__;
            ____result.Defence = __Defence__;
            ____result.Manapoint = __Manapoint__;
            ____result.Magic = __Magic__;
            ____result.Spirit = __Spirit__;
            ____result.Speed = __Speed__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnitInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.UnitInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public UnitInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Rarity", 1 },
                { "Stat", 2 },
                { "RaceType", 3 },
                { "ElementAttack", 4 },
                { "ElementResistance", 5 },
                { "StatusAilmentResistance", 6 },
                { "WeaponCompatibility", 7 },
                { "UnitType", 8 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Rarity"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Stat"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("RaceType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementAttack"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementResistance"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StatusAilmentResistance"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("WeaponCompatibility"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("UnitType"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.UnitInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(9);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Serialize(ref writer, value.Rarity, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.Stat, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.RaceType>().Serialize(ref writer, value.RaceType, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementAttack, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementResistance, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.StatusAilmentResistance, options);
            writer.WriteRaw(this.____stringByteKeys[7]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.WeaponType>().Serialize(ref writer, value.WeaponCompatibility, options);
            writer.WriteRaw(this.____stringByteKeys[8]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.UnitType>().Serialize(ref writer, value.UnitType, options);
        }

        public global::Tech.Data.DB.UnitInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(uint);
            var __Rarity__ = default(global::Tech.Data.DB.Rarity);
            var __Stat__ = default(global::Tech.Data.DB.Stat);
            var __RaceType__ = default(global::Tech.Data.DB.RaceType);
            var __ElementAttack__ = default(global::Tech.Data.DB.Element);
            var __ElementResistance__ = default(global::Tech.Data.DB.Element);
            var __StatusAilmentResistance__ = default(global::Tech.Data.DB.Ailment);
            var __WeaponCompatibility__ = default(global::Tech.Data.DB.WeaponType);
            var __UnitType__ = default(global::Tech.Data.DB.UnitType);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __Rarity__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Stat__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __RaceType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.RaceType>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ElementAttack__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __ElementResistance__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __StatusAilmentResistance__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __WeaponCompatibility__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.WeaponType>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __UnitType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.UnitType>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.UnitInfo();
            ____result.Level = __Level__;
            ____result.Rarity = __Rarity__;
            ____result.Stat = __Stat__;
            ____result.RaceType = __RaceType__;
            ____result.ElementAttack = __ElementAttack__;
            ____result.ElementResistance = __ElementResistance__;
            ____result.StatusAilmentResistance = __StatusAilmentResistance__;
            ____result.WeaponCompatibility = __WeaponCompatibility__;
            ____result.UnitType = __UnitType__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponInfoFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Data.DB.WeaponInfo>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponInfoFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Level", 0 },
                { "Rarity", 1 },
                { "WeaponType", 2 },
                { "WeaponStat", 3 },
                { "ElementAttack", 4 },
                { "StatusAliment", 5 },
                { "NumberOfAttack", 6 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Level"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Rarity"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("WeaponType"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("WeaponStat"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ElementAttack"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StatusAliment"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("NumberOfAttack"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.Data.DB.WeaponInfo value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(7);
            writer.WriteRaw(this.____stringByteKeys[0]);
            writer.Write(value.Level);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Serialize(ref writer, value.Rarity, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.WeaponType>().Serialize(ref writer, value.WeaponType, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.WeaponStat, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Serialize(ref writer, value.ElementAttack, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Serialize(ref writer, value.StatusAliment, options);
            writer.WriteRaw(this.____stringByteKeys[6]);
            writer.Write(value.NumberOfAttack);
        }

        public global::Tech.Data.DB.WeaponInfo Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Level__ = default(uint);
            var __Rarity__ = default(global::Tech.Data.DB.Rarity);
            var __WeaponType__ = default(global::Tech.Data.DB.WeaponType);
            var __WeaponStat__ = default(global::Tech.Data.DB.Stat);
            var __ElementAttack__ = default(global::Tech.Data.DB.Element);
            var __StatusAliment__ = default(global::Tech.Data.DB.Ailment);
            var __NumberOfAttack__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Level__ = reader.ReadUInt32();
                        break;
                    case 1:
                        __Rarity__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Rarity>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __WeaponType__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.WeaponType>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __WeaponStat__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __ElementAttack__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Element>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __StatusAliment__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Ailment>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __NumberOfAttack__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Data.DB.WeaponInfo();
            ____result.Level = __Level__;
            ____result.Rarity = __Rarity__;
            ____result.WeaponType = __WeaponType__;
            ____result.WeaponStat = __WeaponStat__;
            ____result.ElementAttack = __ElementAttack__;
            ____result.StatusAliment = __StatusAliment__;
            ____result.NumberOfAttack = __NumberOfAttack__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Tech.DB
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AbilityFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Ability>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public AbilityFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Description", 1 },
                { "AbilityDescription", 2 },
                { "ImageBytes", 3 },
                { "AbilityInfo", 4 },
                { "Index", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AbilityDescription"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("AbilityInfo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Ability value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.AbilityDescription, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.AbilityInfo>().Serialize(ref writer, value.AbilityInfo, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.Index);
        }

        public global::Tech.DB.Ability Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __AbilityDescription__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __AbilityInfo__ = default(global::Tech.Data.DB.AbilityInfo);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __AbilityDescription__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __AbilityInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.AbilityInfo>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Ability();
            ____result.Name = __Name__;
            ____result.Description = __Description__;
            ____result.AbilityDescription = __AbilityDescription__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.AbilityInfo = __AbilityInfo__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnemyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Enemy>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public EnemyFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Index", 1 },
                { "Description", 2 },
                { "ImageBytes", 3 },
                { "EnemyInfo", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("EnemyInfo"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Enemy value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Index);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.EnemyInfo>().Serialize(ref writer, value.EnemyInfo, options);
        }

        public global::Tech.DB.Enemy Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Index__ = default(int);
            var __Description__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __EnemyInfo__ = default(global::Tech.Data.DB.EnemyInfo);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Index__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __EnemyInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.EnemyInfo>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Enemy();
            ____result.Name = __Name__;
            ____result.Index = __Index__;
            ____result.Description = __Description__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.EnemyInfo = __EnemyInfo__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EquipmentFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Equipment>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public EquipmentFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Description", 1 },
                { "ImageBytes", 2 },
                { "EquipmentInfo", 3 },
                { "Index", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("EquipmentInfo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Equipment value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.EquipmentInfo>().Serialize(ref writer, value.EquipmentInfo, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.Index);
        }

        public global::Tech.DB.Equipment Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __EquipmentInfo__ = default(global::Tech.Data.DB.EquipmentInfo);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __EquipmentInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.EquipmentInfo>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Equipment();
            ____result.Name = __Name__;
            ____result.Description = __Description__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.EquipmentInfo = __EquipmentInfo__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Item>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public ItemFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Description", 1 },
                { "ImageBytes", 2 },
                { "ItemInfo", 3 },
                { "Index", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ItemInfo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Item value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ItemInfo>().Serialize(ref writer, value.ItemInfo, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.Index);
        }

        public global::Tech.DB.Item Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __ItemInfo__ = default(global::Tech.Data.DB.ItemInfo);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ItemInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.ItemInfo>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Item();
            ____result.Name = __Name__;
            ____result.Description = __Description__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.ItemInfo = __ItemInfo__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MaterialFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Material>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public MaterialFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Description", 1 },
                { "ImageBytes", 2 },
                { "MaterialInfo", 3 },
                { "Index", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("MaterialInfo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Material value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.MaterialInfo>().Serialize(ref writer, value.MaterialInfo, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            writer.Write(value.Index);
        }

        public global::Tech.DB.Material Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __MaterialInfo__ = default(global::Tech.Data.DB.MaterialInfo);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __MaterialInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.MaterialInfo>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Material();
            ____result.Name = __Name__;
            ____result.Description = __Description__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.MaterialInfo = __MaterialInfo__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SkillFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Skill>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public SkillFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Description", 1 },
                { "SkillDescription", 2 },
                { "ImageBytes", 3 },
                { "SkillInfo", 4 },
                { "Index", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillDescription"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("SkillInfo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Skill value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.SkillDescription, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.SkillInfo>().Serialize(ref writer, value.SkillInfo, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.Index);
        }

        public global::Tech.DB.Skill Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Description__ = default(string);
            var __SkillDescription__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __SkillInfo__ = default(global::Tech.Data.DB.SkillInfo);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __SkillDescription__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __SkillInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.SkillInfo>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Skill();
            ____result.Name = __Name__;
            ____result.Description = __Description__;
            ____result.SkillDescription = __SkillDescription__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.SkillInfo = __SkillInfo__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UnitFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Unit>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public UnitFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Index", 1 },
                { "Description", 2 },
                { "ImageBytes", 3 },
                { "CharacterInfo", 4 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("CharacterInfo"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Unit value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(5);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Index);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.UnitInfo>().Serialize(ref writer, value.CharacterInfo, options);
        }

        public global::Tech.DB.Unit Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Index__ = default(int);
            var __Description__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __CharacterInfo__ = default(global::Tech.Data.DB.UnitInfo);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Index__ = reader.ReadInt32();
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __CharacterInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.UnitInfo>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Unit();
            ____result.Name = __Name__;
            ____result.Index = __Index__;
            ____result.Description = __Description__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.CharacterInfo = __CharacterInfo__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class WeaponFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.DB.Weapon>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public WeaponFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Stat", 1 },
                { "Description", 2 },
                { "ImageBytes", 3 },
                { "WeaponInfo", 4 },
                { "Index", 5 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Stat"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Description"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("ImageBytes"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("WeaponInfo"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::Tech.DB.Weapon value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(6);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Serialize(ref writer, value.Stat, options);
            writer.WriteRaw(this.____stringByteKeys[2]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Description, options);
            writer.WriteRaw(this.____stringByteKeys[3]);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.ImageBytes, options);
            writer.WriteRaw(this.____stringByteKeys[4]);
            formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.WeaponInfo>().Serialize(ref writer, value.WeaponInfo, options);
            writer.WriteRaw(this.____stringByteKeys[5]);
            writer.Write(value.Index);
        }

        public global::Tech.DB.Weapon Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Stat__ = default(global::Tech.Data.DB.Stat);
            var __Description__ = default(string);
            var __ImageBytes__ = default(byte[]);
            var __WeaponInfo__ = default(global::Tech.Data.DB.WeaponInfo);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Stat__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.Stat>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Description__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __ImageBytes__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __WeaponInfo__ = formatterResolver.GetFormatterWithVerify<global::Tech.Data.DB.WeaponInfo>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.DB.Weapon();
            ____result.Name = __Name__;
            ____result.Stat = __Stat__;
            ____result.Description = __Description__;
            ____result.ImageBytes = __ImageBytes__;
            ____result.WeaponInfo = __WeaponInfo__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Tech.Network.Param
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class PlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Tech.Network.Param.Player>
    {


        public void Serialize(ref MessagePackWriter writer, global::Tech.Network.Param.Player value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.Write(value.Level);
        }

        public global::Tech.Network.Param.Player Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Name__ = default(string);
            var __Level__ = default(uint);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Level__ = reader.ReadUInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Tech.Network.Param.Player();
            ____result.Name = __Name__;
            ____result.Level = __Level__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

