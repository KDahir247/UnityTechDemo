// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(1)
            {
                { typeof(global::TestTable), 0 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.TestTableFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.MagicOnion
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19,T20> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(20);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
            formatterResolver.GetFormatterWithVerify<T18>().Serialize(ref writer, value.Item18, options);
            formatterResolver.GetFormatterWithVerify<T19>().Serialize(ref writer, value.Item19, options);
            formatterResolver.GetFormatterWithVerify<T20>().Serialize(ref writer, value.Item20, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);
            var __Item18__ = default(T18);
            var __Item19__ = default(T19);
            var __Item20__ = default(T20);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Item18__ = formatterResolver.GetFormatterWithVerify<T18>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __Item19__ = formatterResolver.GetFormatterWithVerify<T19>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        __Item20__ = formatterResolver.GetFormatterWithVerify<T20>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__, __Item18__, __Item19__, __Item20__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18,T19> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(19);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
            formatterResolver.GetFormatterWithVerify<T18>().Serialize(ref writer, value.Item18, options);
            formatterResolver.GetFormatterWithVerify<T19>().Serialize(ref writer, value.Item19, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);
            var __Item18__ = default(T18);
            var __Item19__ = default(T19);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Item18__ = formatterResolver.GetFormatterWithVerify<T18>().Deserialize(ref reader, options);
                        break;
                    case 18:
                        __Item19__ = formatterResolver.GetFormatterWithVerify<T19>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__, __Item18__, __Item19__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17,T18> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(18);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
            formatterResolver.GetFormatterWithVerify<T18>().Serialize(ref writer, value.Item18, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);
            var __Item18__ = default(T18);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    case 17:
                        __Item18__ = formatterResolver.GetFormatterWithVerify<T18>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__, __Item18__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,T17> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(17);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
            formatterResolver.GetFormatterWithVerify<T17>().Serialize(ref writer, value.Item17, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);
            var __Item17__ = default(T17);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    case 16:
                        __Item17__ = formatterResolver.GetFormatterWithVerify<T17>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__, __Item17__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(16);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
            formatterResolver.GetFormatterWithVerify<T16>().Serialize(ref writer, value.Item16, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);
            var __Item16__ = default(T16);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    case 15:
                        __Item16__ = formatterResolver.GetFormatterWithVerify<T16>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__, __Item16__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(15);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
            formatterResolver.GetFormatterWithVerify<T15>().Serialize(ref writer, value.Item15, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);
            var __Item15__ = default(T15);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    case 14:
                        __Item15__ = formatterResolver.GetFormatterWithVerify<T15>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__, __Item15__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(14);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
            formatterResolver.GetFormatterWithVerify<T14>().Serialize(ref writer, value.Item14, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);
            var __Item14__ = default(T14);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    case 13:
                        __Item14__ = formatterResolver.GetFormatterWithVerify<T14>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__, __Item14__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(13);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
            formatterResolver.GetFormatterWithVerify<T13>().Serialize(ref writer, value.Item13, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);
            var __Item13__ = default(T13);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    case 12:
                        __Item13__ = formatterResolver.GetFormatterWithVerify<T13>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__, __Item13__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(12);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
            formatterResolver.GetFormatterWithVerify<T12>().Serialize(ref writer, value.Item12, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);
            var __Item12__ = default(T12);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    case 11:
                        __Item12__ = formatterResolver.GetFormatterWithVerify<T12>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__, __Item12__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(11);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
            formatterResolver.GetFormatterWithVerify<T11>().Serialize(ref writer, value.Item11, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);
            var __Item11__ = default(T11);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    case 10:
                        __Item11__ = formatterResolver.GetFormatterWithVerify<T11>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__, __Item11__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(10);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
            formatterResolver.GetFormatterWithVerify<T10>().Serialize(ref writer, value.Item10, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);
            var __Item10__ = default(T10);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    case 9:
                        __Item10__ = formatterResolver.GetFormatterWithVerify<T10>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__, __Item10__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8,T9> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(9);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
            formatterResolver.GetFormatterWithVerify<T9>().Serialize(ref writer, value.Item9, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);
            var __Item9__ = default(T9);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    case 8:
                        __Item9__ = formatterResolver.GetFormatterWithVerify<T9>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__, __Item9__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7,T8> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(8);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
            formatterResolver.GetFormatterWithVerify<T8>().Serialize(ref writer, value.Item8, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);
            var __Item8__ = default(T8);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    case 7:
                        __Item8__ = formatterResolver.GetFormatterWithVerify<T8>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7, T8>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__, __Item8__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6,T7> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(7);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
            formatterResolver.GetFormatterWithVerify<T7>().Serialize(ref writer, value.Item7, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);
            var __Item7__ = default(T7);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        __Item7__ = formatterResolver.GetFormatterWithVerify<T7>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6, T7>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__, __Item7__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5,T6> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
            formatterResolver.GetFormatterWithVerify<T6>().Serialize(ref writer, value.Item6, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);
            var __Item6__ = default(T6);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __Item6__ = formatterResolver.GetFormatterWithVerify<T6>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5, T6>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__, __Item6__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4,T5> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
            formatterResolver.GetFormatterWithVerify<T5>().Serialize(ref writer, value.Item5, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);
            var __Item5__ = default(T5);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        __Item5__ = formatterResolver.GetFormatterWithVerify<T5>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4, T5>(__Item1__, __Item2__, __Item3__, __Item4__, __Item5__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3,T4> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
            formatterResolver.GetFormatterWithVerify<T4>().Serialize(ref writer, value.Item4, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);
            var __Item4__ = default(T4);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __Item4__ = formatterResolver.GetFormatterWithVerify<T4>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3, T4>(__Item1__, __Item2__, __Item3__, __Item4__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2,T3> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2, T3>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2, T3> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
            formatterResolver.GetFormatterWithVerify<T3>().Serialize(ref writer, value.Item3, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2, T3> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);
            var __Item3__ = default(T3);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Item3__ = formatterResolver.GetFormatterWithVerify<T3>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2, T3>(__Item1__, __Item2__, __Item3__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class DynamicArgumentTupleFormatter<T1,T2> : global::MessagePack.Formatters.IMessagePackFormatter<global::MagicOnion.DynamicArgumentTuple<T1, T2>>
    {


        public void Serialize(ref MessagePackWriter writer, global::MagicOnion.DynamicArgumentTuple<T1, T2> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<T1>().Serialize(ref writer, value.Item1, options);
            formatterResolver.GetFormatterWithVerify<T2>().Serialize(ref writer, value.Item2, options);
        }

        public global::MagicOnion.DynamicArgumentTuple<T1, T2> Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __Item1__ = default(T1);
            var __Item2__ = default(T2);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __Item1__ = formatterResolver.GetFormatterWithVerify<T1>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Item2__ = formatterResolver.GetFormatterWithVerify<T2>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::MagicOnion.DynamicArgumentTuple<T1, T2>(__Item1__, __Item2__);
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class TestTableFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::TestTable>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public TestTableFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "Name", 0 },
                { "Index", 1 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Name"),
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("Index"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::TestTable value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteMapHeader(2);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Name, options);
            writer.WriteRaw(this.____stringByteKeys[1]);
            writer.Write(value.Index);
        }

        public global::TestTable Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Name__ = default(string);
            var __Index__ = default(int);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __Name__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __Index__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::TestTable();
            ____result.Name = __Name__;
            ____result.Index = __Index__;
            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

