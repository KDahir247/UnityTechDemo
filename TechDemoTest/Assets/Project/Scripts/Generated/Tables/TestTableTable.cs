// <auto-generated />
#pragma warning disable CS0105
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace MasterData.Tables
{
   public sealed partial class TestTableTable : TableBase<TestTable>, ITableUniqueValidate
   {
        public Func<TestTable, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<TestTable, string> primaryIndexSelector;

        readonly TestTable[] secondaryIndex1;
        readonly Func<TestTable, int> secondaryIndex1Selector;

        public TestTableTable(TestTable[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Name;
            this.secondaryIndex1Selector = x => x.Index;
            this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.Collections.Generic.Comparer<int>.Default);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<TestTable> SortByIndex => new RangeView<TestTable>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);

        public TestTable FindByName(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, false);
        }
        
        public bool TryFindByName(string key, out TestTable result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public TestTable FindClosestByName(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<TestTable> FindRangeByName(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }

        public TestTable FindByIndex(int key)
        {
            return FindUniqueCoreInt(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<int>.Default, key, false);
        }
        
        public bool TryFindByIndex(int key, out TestTable result)
        {
            return TryFindUniqueCoreInt(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<int>.Default, key, out result);
        }

        public TestTable FindClosestByIndex(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<TestTable> FindRangeByIndex(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
            ValidateUniqueCore(data, primaryIndexSelector, "Name", resultSet);       
            ValidateUniqueCore(secondaryIndex1, secondaryIndex1Selector, "Index", resultSet);       
        }

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(TestTable), typeof(TestTableTable), "Test",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(TestTable).GetProperty("Name")),
                    new MasterMemory.Meta.MetaProperty(typeof(TestTable).GetProperty("Index")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(TestTable).GetProperty("Name"),
                    }, true, true, System.StringComparer.Ordinal),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(TestTable).GetProperty("Index"),
                    }, false, true, System.Collections.Generic.Comparer<int>.Default),
                });
        }

    }
}